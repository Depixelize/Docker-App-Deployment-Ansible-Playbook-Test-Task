---
- hosts: all
  vars:
    nginx_image: nginx:alpine
    apache_image: httpd:alpine
    node_exporter_image: prom/node-exporter:latest
    nginx_exporter_image: quay.io/prometheus/nginx-exporter:latest
    mysql_exporter_image: quay.io/prometheus/mysqld-exporter:latest
    cadvisor_image: google/cadvisor:latest
    prometheus_image: prom/prometheus:latest
    grafana_image: grafana/grafana:latest
    fluentd_image: fluent/fluentd:latest
    mysql_image: mysql:latest
  tasks:
    - name: Update package index
      # Обновляем индекс пакетов
      apt:
        update_cache: yes

    - name: Install Docker
      # Устанавливаем Docker
      apt:
        name: docker.io
        state: present
      
    - name: Create Docker network
      # Создаем сеть для докер контейнеров
      docker_network:
        name: stack_network
        driver: bridge
        subnet: 10.0.0.0/24
        gateway: 10.0.0.1

    - name: Start Nginx container
      # Запускаем контейнер с Nginx
      docker_container:
        name: nginx
        image: "{{ nginx_image }}"
        network_mode: "stack_network"
        volumes:
          - "./nginx/conf:/etc/nginx/conf.d"
          - "./nginx/logs:/var/log/nginx"
        ports:
          - "80:80"
        env:
          - GEOIP_ENABLED=1
        log_driver: "json-file"
        log_opt:
          max-size: "100m"
          max-file: "3"
		  
    - name: Start Apache container
      # Запускаем 2 контейнера с Apache
      docker_container:
        name: apache1
        image: "{{ apache_image }}"
        network_mode: "stack_network"
        volumes:
          - "./apache/conf:/usr/local/apache2/conf"
          - "./apache/logs:/usr/local/apache2/logs"
        ports:
          - "81:80"
      
    - name: Start Apache container
      docker_container:
        name: apache2
        image: "{{ apache_image }}"
        network_mode: "stack_network"
        volumes:
          - "./apache/conf:/usr/local/apache2/conf"
          - "./apache/logs:/usr/local/apache2/logs"
      ports:
        - "82:80"
      
    - name: Start Node Exporter container
      # Запускаем контейнер с Node Exporter
      docker_container:
        name: node_exporter
        image: "{{ node_exporter_image }}"
        network_mode: "stack_network"
        volumes:
          - "/proc:/host/proc:ro"
          - "/sys:/host/sys:ro"
          - "/:/rootfs:ro"
      
    - name: Start Nginx Exporter container
      # Запускаем контейнер 
	  docker_container:
        name: nginx_exporter
        image: "{{ nginx_exporter_image }}"
        network_mode: "stack_network"
        ports:
          - "9113:9113"
        command: -nginx.scrape_uri=http://nginx:80/stub_status
    
    - name: Start MySQL Exporter container
      # Запускаем контейнер с MySQL Exporter
      docker_container:
        name: mysql_exporter
        image: "{{ mysql_exporter_image }}"
        network_mode: "stack_network"
        ports:
          - "9104:9104"
        command: --config.my-cnf=/etc/mysql/my.cnf
    
    - name: Start cAdvisor container
      # Запускаем контейнер с cAdvisor
      docker_container:
        name: cadvisor
        image: "{{ cadvisor_image }}"
        network_mode: "stack_network"
        volumes:
          - "/:/rootfs:ro"
          - "/var/run:/var/run:rw"
          - "/sys:/sys:ro"
          - "/var/lib/docker/:/var/lib/docker:ro"
        ports:
          - "8080:8080"
      
    - name: Start Prometheus container
      # Запускаем контейнер с Prometheus
      docker_container:
        name: prometheus
        image: "{{ prometheus_image }}"
        network_mode: "stack_network"
        volumes:
          - "./prometheus/conf:/etc/prometheus"
          - "./prometheus/data:/prometheus"
      ports:
        - "9090:9090"
      
    - name: Start Grafana container
      # Запускаем контейнер с Grafana
	  docker_container:
        name: grafana
        image: "{{ grafana_image }}"
        network_mode: "stack_network"
        volumes:
          - "./grafana/conf:/etc/grafana"
          - "./grafana/data:/var/lib/grafana"
        ports:
          - "3000:3000"
      
    - name: Start Fluentd container
      # Запускаем контейнер с Fluentd
      docker_container:
        name: fluentd
        image: "{{ fluentd_image }}"
        network_mode: "stack_network"
        volumes:
          - "./fluentd/conf:/fluentd/etc"
          - "./fluentd/logs:/fluentd/log"
      
    - name: Start MySQL container
      # Запускаем контейнер с MySQL
      docker_container:
        name: mysql
        image: "{{ mysql_image }}"
        network_mode: "stack_network"
        volumes:
          - "./mysql/conf:/etc/mysql"
          - "./mysql/data:/var/lib/mysql"